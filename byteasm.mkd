# Overview

`@` accumulator is inside mega-alu
`$` cache is outside mega-alu

## Accumulator

`@` registers inside mega-alu have built in MIMD ops which take effect over a range.
The MIMD ops are: NAND, NOR, NOT, TON, DUP, ROL, ROR and NOP.

Symbols:

eo.nand.e
eo.nor.e
e.not.o
eo.not.eo
e.dup.o
eo.dup.eo
e.rol.o   ?

Perhaps like this instead:

```
# In the .s column nand takes negated inputs. In the .t column nor takes a duplicated input.
# The .t column then gets rewinded (?) back to the previous even address from where the nor
# takes its input. (Or maybe change the functionality of dup?...)

.s        ; .t        ; .u      ; .v      ; .w      ; .x      ; .y      ; .z
not.in    ; dup.in    ; rol     ; rol     ; nop     ; nop     ; nop     ; nop
not.in    ; rewind?   ; rol     ; rol     ; nop     ; nop     ; nop     ; nop
nand.in   ; nor.in    ; rol     ; rol     ; nop     ; nop     ; nop     ; nop
nand.in   ; nor.in    ; rol     ; rol     ; nop     ; nop     ; nop     ; nop
nand.out  ; nor.out   ; rol     ; rol     ; nop     ; nop     ; nop     ; nop
                                          # perhaps trailing nops are not really needed.
```

- Needs an instruction to invert inputs for NAND and NOR easily. Maybe a variant of NOT?
  So eo.not.eo does this?

- ROL and ROR can also have variants with NOT and TON?

- ROL and ROR can also work as SHL and SHR with one extra bit in the opcode.

- The other logic gates can be easily implemented with very few micro ops.
- - AND is an inverted input NOR gate.
- - AND is also an inverted output NAND gate.
- - OR is an inverted input NAND gate.
- - OR is also an inverted output NOR gate.
- - NOT is a duplicated input NAND gate.
- - NOT is also a duplicated input NOR gate.

- Eight parallel instructions and eight parallel data is actually MIMD; not SIMD.

- Can you have increment instruction that slides forwards? How do you increment the
Instruction Capability (IC)?

- Also maybe have register windows for PCB that stores @, $, IC and PR. PR is predication reg.
Is .NOBITZUC the PR?

- A way to set locus on specific data so that when data slides forward through the accumulator
ops, the now modified data is accessible through the same variable without explicit indexing.
So a sliding register window with implied indexing? The sliding register window actually shrinks
the range from lower address towards higher address, or in the other direction with some Ops.

- There needs to be a way to mask a group of discontinous registers within the range, and
have the mask slide with the instructions so that the mask alway masks the result value of 
the previous executed instruction.

- Divide the range of registers with a nice round number like 2, 4, 8, 16, 32, or 64. Then
Have the same computations take place for all the divided sub-ranges. Any masking done in
one sub-range must apply to all sub-ranges. This is done by the subset instruction.

NAND and NOR operations always begin with one parameter in an even register, and the other
parameter in the next odd register. The result is stored in the next (increasing address)
even register. This "sliding forwards" of the result to the next even register can be
countered by doing two TON operations to move the result back to the previous even register,
where the first parameter of the previous NAND or NOR operation used to be.

NOT takes one input and inverts it, therefore NOT can be done from even to odd register, or
from odd to even register. Two NOTs following one another on a value in an even register
moves that value from the even register to the next (increasing address) even register.
This happens through the odd register in between, which will have the inverted value after
the first of those two NOT operations is done. Likewise two NOTs following one another on a
value in an odd register moves that value from the odd register to the next (increasing 
address) odd register. This happens through the even register in between, which will have the inverted bits after the first of those two NOT operations is done. This is because the NOT
operation is reversible. Two NOT operations on the same data returns the original value of
that data. Or to put it as an equation: NOT( NOT(X) ) == X.

The NOT operation can also be performed in the other direction, towards decreasing adresses.
TON is the name of the NOT operation backwards. One TON op inverts the bits of a value and
stores the result in the previous register (odd or even). Two TON ops in succession will
invert the bits twice, and store the results in the register two steps backwards. The
register in between will be left with the inverted bits. This allows moving the values to a
previous (decreasing address) register, two steps backwards. 

The DUP operation duplicates values from even registers to the next odd registers. This
is useful in situations where a logic gate is constructed of NAND-gates or NOR-gates, and
the inputs are duplicated, eg. OR, XNOR, NOT, AND and MUX.

## Cache

Code can be executed from cache. Perhaps compressed code can be decompressed in accumulator,
but it needs to be moved to cache registers before it can be executed. No execution of code
from accumulator!


## Direct memory access through capabilities

### Accum capabilities

Direct memory access to accumulator

```
accumallcaps = @                # assign full accumulator access capability
accumspecificpage = @01fh:      # assign a specific page capability
accumspecificreg = @020h:01h    # assign a specific register 01h from page 020h
accumrangereg = @020h:02h...04h # assign a range of registers from page 020h
accswizzle = @020h:05h...06h.st # assign a range of two most significant bytes from registers 05h
                                # and 06h in page 020h
```

### Cache capabilities

Direct memory access to cache

```
cacheallcaps = $                # assign full cache access capability
cachespecificpage = $008h:      # assign a specific page capability
cachepagerange = $009h-00bh:    # continous three-page range capability
```

## Indexing instead of direct memory access

Square brackets `[` and `]` imply indexing -- not direct memory access.

```
# ...save accum here?
@ = @01eh...01fh:   # direct memory capability to actual memory region. Two pages in total.

@ = @[:0...3]       # page 0 (from memory range given in the direct memory capability),
                    # registers from 0 to 3 inclusive. Four registers in total.

# ...do sth with the registers.
# ...restore accum here?
@ = @[0...1:]       # pages from 0 to 1 inclusive. Two pages in total. Page 0 is the first
                    # page in the memory range given in the direct memory capability.

@ = @[0:0...1:255]  # should it be possible to specify a range like this?
```

Indexing is a way for the program to access memory without knowing actual memory adressess.
When a program starts it recieves a capability to the memory it can access, and this capability
can be split off to sub-capabilities that control smaller sub-areas of that memory. Indexed
memory areas are always continous -- no memory mapping of discontinous pages is done.


## Assignment instruction

The regular assignment instruction is the equal-sign: `=`.

```
var = other_var     # move capability from other_var to var???

```
FIXME: clear this ambiguity:
Differentiate between setting the capability to a range, and moving the content of the
range using the swizzles or square brackets '[]'. eg.:

```
@ = temp_var1               # assign capability for temp_var1 to @
@.stuv = temp_var2.stuv     # move contents of temp_var2.stuv to @.stuv
@.wxyz = temp_var3[2].stuv  # move contents of temp_var3[2].stuv to @.wxyz
```

The assignment instruction also has a variant that can add gaps between registers in the
memory range. For example you can spread the registers from `other_var` so that there is
a gap of three registers in the destination `var`.

```
# variable definitions
@var[:16]       :   even    .stuvwxyz   8byte
$other_var[:4]  :   even    .stuvwxyz   8byte

# ...

var[:0...15] =^^^ other_var[:0...3]  # 4 registers is spread out to 16 registers
```

Using syntatic sugar provided by the assembler one can define complex patterns for
the data being moved to the destination.

```
# variable definitions
@var[:16]       :   even    .stuvwxyz   8byte
$other_var[:4]  :   even    .stuvwxyz   8byte

# ...

var[:0...15] =^^^=^^^==^^^^^^ other_var[0...3]  # 4 regs are spread out in a pattern
```

These syntatic-sugar patterns will generate multiple actual assignment instructions.

### Assignment instruction is also used on '@' and '$'

Only capabilities are assigned to @ or $. It can be said that @ and $ are of type
capability. Casting from type capability to type unsigned should be possible, but
the capability bit gets cleared when that is done. The result of such casting can
not be stored in @ or $, as these registers only hold capabilities.

Turning a 8byte unsigned in to a capability is called minting. Executing instructions
that mint new capabilities requires the mint capability (or mint-mode?).

subsetting an existing capability can be done by any piece of code, if that code
has been given a capability to subset.

A regular pattern is to save the accumulator to a variable, and restore it from that
variable later on.

```
accum = @   # Save accumulator so you can restore it later. The capability gets
            # saved to the variable accum, which is of type capability.
@ = var     # @ is now limited to the range of registers defined by var[:16].
            # var is a range of type unsigned. Only the ...um? ..explain this plz!

# ...do sth with current @.

@ = accum   # Restore accumulator.
```

Note that no minting is going on here.

The below examples illustrate what is going on in each case.

```
accum = @           # accum only recieves the capability of @. The data controlled by @
                    # is not copied. The capability bit of accum gets set. Single Op.

@ = var             # @ only recieves capability of var, so anything done to @ now will 
                    # result in the data of var changing. var is [:16] so now @ is also 
                    # of that capacity. Single Op.

@[:0...15] = var    # @[:0...15] is refering to a range of registers in @. The actual
                    # data in var is moved to this range inside @. @-capability
                    # itself remains unchanged. Composite Op.

var = @[:0...15]    # The actual data in @[:0...15] is moved to var. var is [:16] in
                    # capacity, so there is enough room to recieve the data.
                    # Composite Op.

@ = accum           # @ recieves the capability of accum. accum must have the capability
                    # bit set, so that it is a valid capability, and the capability
                    # must have the @-bit set so that it is a valid @-capability. You
                    # can not assign a cache-capability to the accumulator.
                    # Single Op.
```


## addition using one's complement integers.

Using one's complement for signed integers gives us negative zero and positive zero.

See: https://www.tutorialspoint.com/one-s-complement. Apparently you can get subtraction for
the price of one NOT and two ADDs when carry bit is set, and two NOTs and one ADD when it isn't.

The assembly language needs a way to do operator overloading. Since there is no discrete add
instruction in the ISA, addition needs to happen using multiple micro-operations in the
accumulator. The overloaded plus-character '+' can then be used to generate the sequence
of micro-ops.

Possible sugar coated syntax:

```
@.stuv + 100
@.stuv + cap.stuv
```

# Branching or predicates?

## .NOBITZUC is the status register

- .N Set if the result of an operation is a negative integer
- .O Set on overflow
- .B Batch ops for asynchronous execution?
- .I Interrupt?
- .T Trap, other than undefined instruction.
- .Z Set if the result of an operation is a zero. Also .N is set if zero is negative.
- .U Undefined instruction?
- .C Carry flag

Prehaps Interrupts and Traps are .I and .T? What is .B? .B is a Batch of ops.

## jump based on byte-swizzle specific carry-flag

Perhaps use predicates to not have any jump instructions at all?

```
.z + 256                            # set carry flag for .z
oncarry .z cap_code1                # branch on carry flag set for .z
```

Perhaps use an instruction to set predicates for the next n number of instructions?
Or perhaps just prefix the line with `oncarry`.

```
.s + 250                # carry flag for .s will be set if .s + 250 is more than 255.
oncarry .s @.yz + 64
oncarry .s @.wx + 255
$.wx = @.wx             # this instruction is not executed if carry bit for .s is set.
oncarry .s
```

But.. then you can not include .s in the additions on the following lines for fear that
the .s carry bit might be cleared. This would then prevent the execution of the following
lines that start with oncarry .s.

Also, what register or memory address is the .s swizzle referring to?

## jump based on byte-swizzle specific zero-flag

```
.s = 100
.s - 100                            # set zero flag for .s
onzero .s cap_code2                 # branch on zero flag set for .s
```

## force a jump by explicitly setting overflow flag for .s in status register

```
.O or 10000000b                     # .NOBITZUC is the status register
onoverflow .s cap_code3
```

# General instruction format

1byte mini instructions work on current range capability, so they don't need parameter
fields. Opcode only. So there is a need for @-capability register and $-capability register.
these capability registers need to hold the following

# Capability format

## Capability header

Capability header (n most significant bits):

```
- @ or $ type                       1bit
- executable (for $-type only)      1bit
- page-range or register-range      1bit  = 3 bits
```
TODO: Capabilities are stored in the zero-page for fast indexing by the instruction parameters.
Therefore capabilities themselves can be 64bits wide. When capabilities are not needed to be
quickly accessible (like when the process is not currently being executed) then capabilities
can be also stored anywhere in the cache. They will retain their capability bits when stored
anywhere in the cache.


## Page subset mask

Page subset mask is used in memory address calculations, so that it is not possible for a
range to start at an odd address. Also the subset mask will limit the starting
address to a coarser granularity.

(range_begin_address).st = (page address).st 
(range_begin_address).u  = (register  AND page_subset_mask).u

(range_begin_address).stu is the actual range begin address. The AND operation on the lowest
byte zeroes out up to 8 bits to get a granularity between no divider (mask = b11111111) and
maximum divider (mask = b00000000).

- b11111111 subset off -- address individual regs, and range can start at odd address also.
- b11111110 subset 2  -- page is divided into register pairs. Ranges start at even addresses.
- b11111100 subset 4  -- page is divided into 4 register subsets. Ranges start even.
- b11111000 subset 8  -- page is divided into 8 register subsets. Ranges start even.
- b11110000 subset 16 -- ...

This will zero out the lower bits to set the address at a reasonable location. See examples.

```
Examples: subset 2, addr 0  -- 0 AND b11111110 = 0
          subset 2, addr 1  -- 1 AND b11111110 = 0
          subset 2, addr 2  -- 2 AND b11111110 = 2
          subset 2, addr 3  -- 3 AND b11111110 = 2
          subset 2, addr 4  -- 4 AND b11111110 = 4
          subset 2, addr 5  -- 5 AND b11111110 = 4
          subset 2, addr 6  -- 6 AND b11111110 = 6
          subset 2, addr 7  -- 7 AND b11111110 = 6
          subset 2, addr 8  -- 8 AND b11111110 = 8

Examples: subset 8, addr 12 -- 12 AND b11111000 = 8
          subset 8, addr 14 -- 14 AND b11111000 = 8
          subset 8, addr 15 -- 15 AND b11111000 = 8
          subset 8, addr 16 -- 16 AND b11111000 = 16        
```

Alternate parameter names for subset:

```
subset  1 | off
subset  2 | pairs
subset  4 | quads
subset  8 | octets
subset 16 | hexads
subset 32
subset 64
subset 128
```
You should be able to change the page subset mask without having to use priviledged instructions.


## Page range capability

```
- subset            8bits
- swizzles          8bits
- firstpage        16bits
- firstregister     8bits
- lastpage         16bits
- lastregister      8bits = 64bits total
```

## Register range capability

```
- subset            8bits
- swizzles          8bits
- page             16bits
- firstregister     8bits
- lastregister      8bits = 48bits total
```

- needs a bit to tell us if it is a @-capability, or a $-capability.
- needs a bit to tell us if it is a [pg1:rg1...pg2:rg2] or a [pg1...pg2:rg1...rg2]

This defines a range of page1:reg1 to page2:reg2 ( or pg1:rg1...pg2:rg2 ). Alternatively
It defines a range of ( pg1...pg2:rg1...rg2 ), which means a range of reg1 to reg2 in 
each of page1 to page2.

Continous page range capability

The subset is set as a number of consecutive registers. It applies to all pages in a range.

Use the following to set sub regions to 4 registers each:

```
@subset 4
```

Turn page subsetting off:

```
@subset 1
```

# Instructions, and how they are packed into 8byte doublewords

All instructions are 1byte in size, but may be followed by zero to three parameter bytes.
The p.type field in the instruction byte reveals how many parameter bytes follow.

There are several types of primitive instructions:
- instruction to set the 4 register pcb in the zero-page when switching to another process.
- instructions to set execution scope and data scope for code and data in cache.
- instructions to assign values into registers at an offset from data scope base.

- instructions to do copy ops from cache, to cache.
- instructions to do copy ops from cache, to accumulator.
- instructions to do copy ops from accumulator, to cache.
- instructions to do copy ops from accumulator to accumulator.

- instructions to do logic gate ops on the swizzles of the accumulator.

- instructions to increment and decrement nibbles with mandatory NibbleMuncher extension.

Eight instructions execute in parallel. Undefined instructions can be trapped.

## 1byte instruction for parallel execution

1byte mini instruction bits:
```
| bit 6-7:| bit 0-5:                    |
|----|----|----|----|----|----|----|----|
| p.type  | opcode                      |
```

### i.type field in the two most significant bits

The two most significant bits convey the instruction type. The different
posibilities for these bits are:

| p.type       | Meaning                      |
|--------------|------------------------------|
| p.type = 11b | Three parameter bytes follow |
| p.type = 10b | Two parameter bytes follow   |
| p.type = 01b | One parameter byte follows   |
| p.type = 00b | No parameter bytes follow    |

The instruction lanes don't need to be aligned. New instructions may be introduced
on one lane, while other lanes are still reading parameter bytes for previous
instructions.

The 6bit opcode field can specify the opcode 0-63

| opcode  | Functionality                                                     |
|---------|-------------------------------------------------------------------|
| 000000b | nop -- No Operation.                                              |
| 000001b | ... some other instruction, perhaps undefined, and trapped.       |
| 000010b | ... some other instruction, perhaps undefined, and trapped.       |
| 000011b | ... as above ...                                                  |
| ...     | ...                                                               |
| 000100b | 01b one param: offset from beginning of scope;  accum = @         |
| 000000b | 10b two params: first reg and last reg;         @ = @[0:0...3]    |
| 000000b | 01b one param: number of regs in subset;        @subset 4         |
| 000000b | 01b one param: bitpositions to shift left;      @ << 3 b0         |
| 000000b | 01b one param: bitpositions to shift right;     @ >> 3 b0         |
| 000000b | 01b one param: bitpositions to shift left;      @ << 3 b1         |
| 000000b | 01b one param: bitpositions to shift right;     @ >> 3 b1         |
| 000000b | 01b one param: bitpositions to rotate left;     @ << 3            |
| 000000b | 01b one param: bitpositions to rotate right;    @ >> 3            |
| 000101b | 01b one param: offset from beginning of scope;  @ = accum         |
| 000000b | 10b two params: offset and immediate value;     status = 00h      |
| 000000b | 10b two params: offset and scope;     sthing = instance something |
|         | offset to var in current scope to hold return value (capability), |
|         | scope to instantiate.                                             |
| 000000b | 10b two params: offset and tuple;   status = [sthing do_sth: 00h] |
| 000000b | 10b two params: offset from scope for both;     r1 = p1           |
| 000000b | 10b two params: offset and immediate value;     r2 = 01h          |
| ...     | ...                                                               |

| opcode  | Functionality                                                     |
|---------|-------------------------------------------------------------------|
| 000100b | 01b one byte:  offset from beginning of scope;  accum = @         |
| 000101b | 01b one byte:  offset from beginning of scope;  @ = accum         |
| 000110b | 10b two bytes(*): 1st page-LSB, 2nd page-lsB;   @ = @[0-255:]     |
| 000111b | 11b three bytes(*): page-LSB, 1st and 2nd reg;  @ = @[0:0...3]    |
|         | (*) the most significant byte of page must be derieved from the @.|
| 001000b | 01b one byte: Set page-MSB of @;                                  |
| 001001b | TODO: continue here... |
| ...     | ...                                                               |
| 000000  | 01b one param: offset from beginning of scope;  cache = $         |
| 000000  | 01b one param: offset from beginning of scope;  $ = cache         |
| 000000  | 11b three bytes: page, first_reg1, last_reg;    $ = $[0:0...15]   |
| ...     | ...                                                               |
| 011110b | 11b three params (0xde) --  |
| 101101b | 10b two params (0xad) -- |
| 111110b | 10b two params (0xbe) -- |
| 101111b | 11b three params (0xef) -- |
| ...     | ...                                                               |


# "XEST" Binary format

The binary as stored on disk should have a 16byte header.

The first 8 bytes is as follows:

```
                codesize
                |
          'X''E'|______
           |  | |      |
00000000  58 45 00 00 03 00 00 02                        |XE......|
                         |______|
                                |
                                |
                                datasize
```
Datasize is the size of the static data area that follows the code area. Both codesize
and datasize are 24bit unsigned integers.

The next 8 bytes is the scope table header.

```
                numscope
                |
          'S''T'|______
           |  | |      |
00000008  53 54 00 00 00 00 00 00                        |ST......|
                         |______|
                                |
                                code entry
                                point offset

```
numscope is the number of scope fields stored after the code and the initialized data.

TODO: What scope fields? Are there any scope fields?

After the header is stored the code and initialized data.

When the code and the initialized data has been loaded into memory, the heap begins 
immediately after.


# NibbleMuncher is used for memory management and code execution

NOTE TO SELF: Everything is made out of tuples. Tuples are a binary tree datastructure.

A tuple of tuples

The string datastructure should accelerate the following organisition of data: 1D two-fields,
2D four-fields (quadtrees), and 3D eight-fields (octrees).

TODO: Think of the string object type and how it could also be used to store quadtrees and
octrees.

Heap as a binary tree described here: https://en.wikipedia.org/wiki/Binary_heap

TODO: the 4 byte prefix in german strings is useful in string searches, such as used in 
database systems. In german strings the first four bytes of the short string presentation
overlaps with the four bytes of the prefix field in the long string presentation. This 
feature should be adopted here also!

https://cedardb.com/blog/german_strings/


The string object type stores tokenized strings. A token can be up to 255 bytes long and is
stored like a pascal string, with the first byte containing the length of the token.
